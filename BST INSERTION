
#include <stdio.h>
#include <stdlib.h>


typedef struct TreeNode {
    int data;
    struct TreeNode* left;
    struct TreeNode* right;
} TreeNode;


TreeNode* createNode(int item) {
    TreeNode* newNode = (TreeNode*)malloc(sizeof(TreeNode));
    if (newNode == NULL) {
        printf("Memory allocation failed.\n");
        exit(1);
    }
    newNode->data = item;
    newNode->left = newNode->right = NULL;
    return newNode;
}


TreeNode* insertion(TreeNode* root, int item) {
   
    if (root == NULL) {
        return createNode(item);
    }
    
    if (item < root->data) {
        root->left = insertion(root->left, item);
    } else {
        root->right = insertion(root->right, item);
    }

    return root;
}

void inorderTraversal(TreeNode* root) {
    if (root != NULL) {
        inorderTraversal(root->left);
        printf("%d ", root->data);
        inorderTraversal(root->right);
    }
}

int main() {
    TreeNode* root = NULL;
    
    root = insertion(root, 50);
    insertion(root, 30);
    insertion(root, 20);
    insertion(root, 40);
    insertion(root, 70);
    insertion(root, 60);
    insertion(root, 80);

    printf("Inorder Traversal of the BST: ");
    inorderTraversal(root);

    return 0;
}

