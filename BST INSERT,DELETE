#include <stdio.h>
#include <stdlib.h>

typedef struct TreeNode {
    int data;
    struct TreeNode* left;
    struct TreeNode* right;
} TreeNode;

TreeNode* createNode(int item) {
    TreeNode* newNode = (TreeNode*)malloc(sizeof(TreeNode));
    if (newNode == NULL) {
        printf("Memory allocation failed.\n");
        exit(1);
    }
    newNode->data = item;
    newNode->left = newNode->right = NULL;
    return newNode;
}

TreeNode* insertion(TreeNode* root, int item) {
    if (root == NULL) {
        return createNode(item);
    }
    if (item < root->data) {
        root->left = insertion(root->left, item);
    } else {
        root->right = insertion(root->right, item);
    }
    return root;
}

void postorderTraversal(TreeNode* root) {
    if (root != NULL) {
        postorderTraversal(root->left);
        postorderTraversal(root->right);
        printf("%d ", root->data);
    }
}

TreeNode* findMin(TreeNode* node) {
    TreeNode* current = node;
    while (current->left != NULL) {
        current = current->left;
    }
    return current;
}

TreeNode* delete(TreeNode* root, int item) {
    if (root == NULL) {
        return root;
    }
    if (item < root->data) {
        root->left = delete(root->left, item);
    } else if (item > root->data) {
        root->right = delete(root->right, item);
    } else {
        if (root->left == NULL) {
            TreeNode* temp = root->right;
            free(root);
            return temp;
        } else if (root->right == NULL) {
            TreeNode* temp = root->left;
            free(root);
            return temp;
        }
        TreeNode* temp = findMin(root->right);
        root->data = temp->data;
        root->right = delete(root->right, temp->data);
    }
    return root;
}

int main() {
    TreeNode* root = NULL;

    root = insertion(root, 50);
    insertion(root, 30);
    insertion(root, 20);
    insertion(root, 40);
    insertion(root, 70);
    insertion(root, 60);
    insertion(root, 80);

    printf("Inorder Traversal of the BST before deletion: ");
    postorderTraversal(root);

    int itemToDelete = 30;
    root = delete(root, itemToDelete);

    printf("\nInorder Traversal of the BST after deletion of %d: ", itemToDelete);
    postorderTraversal(root);

    return 0;
}
